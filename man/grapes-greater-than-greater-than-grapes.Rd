% Generated by roxygen2 (4.0.1): do not edit by hand
\name{\%>>\%}
\alias{\%>>\%}
\title{Pipe an object forward}
\usage{
x \%>>\% expr
}
\arguments{
\item{x}{object}

\item{expr}{expression}
}
\description{
The \code{\%>>\%} operator pipes the object on the left-hand side to the
right-hand side as either the first argument and \code{.}, or a symbol defined
by lambda expression.
}
\details{
When a function name or call directly follows the operator in the form
\code{x \%>>\% f} or \code{x \%>>\% f(...)}, the operator performs first-argument piping,
that is, \code{f(x,...)} will be evaluated (also with \code{.} representing \code{x}).

When an expression enclosed within \code{\{\}} or \code{()} in the form
\code{x \%>>\% { expr }} or \code{x \%>>\% ( expr )}, the operator performs
dot-piping, that is, the expression will be evaluated with \code{.}
representing \code{x}.

When a lambda expression is supplied in the form \code{x \%>>\% (p -> expr)} or
\code{x \%>>\% (p ~ expr)}, \code{expr} will be evaluated with \code{p} representing
\code{x}.
}
\examples{
\dontrun{
# Pipe as first-argument to a function name
rnorm(100) \%>>\% plot

# Pipe as first-argument to a function call
rnorm(100) \%>>\% plot()
rnorm(100) \%>>\% plot(col="red")
rnorm(100) \%>>\% plot(col="red",main=length(.))

# Pipe as first-argument to a function call in namespace
rnorm(100) \%>>\% base::mean()

# Pipe to an expression enclosed by braces with .
representing the piped object
rnorm(100) \%>>\% { plot(.,col="red",main=length(.)) }

# Pipe to an expression enclosed by parentheses with .
representing the piped object
rnorm(100) \%>>\% (plot(.,col="red",main=length(.)))

# Pipe to an expression enclosed by parentheses with
lambda expression in the form of x -> f(x) or x ~ f(x).
rnorm(100) \%>>\% (x -> plot(x,col="red",main=length(x)))
rnorm(100) \%>>\% (x ~ plot(x,col="red",main=length(x)))

# Pipe to an anomymous function
rnorm(100) \%>>\% (function(x) mean(x))()
rnorm(100) \%>>\% {function(x) mean(x)}()

# Pipe to an enclosed function to make a closure
z <- rnorm(100) \%>>\% (function(x) mean(x+.))
z(1) # 3

z <- rnorm(100) \%>>\% {function(x) mean(x+.)}
z(1) # 3

# Data manipulation with dplyr
library(dplyr)
iris \%>>\%
  mutate(Sepal.Size=Sepal.Length*Sepal.Width,
    Petal.Size=Petal.Length*Petal.Width) \%>>\%
  select(Sepal.Size,Petal.Size,Species) \%>>\%
  group_by(Species) \%>>\%
  do(arrange(.,desc(Sepal.Size+Petal.Size)) \%>>\% head(3))

# Data manipulation with rlist
library(rlist)
list(1,2,3) \%>>\%
  list.map(. + 1) \%>>\%
  list.filter(. <= 5) \%>>\%
  list.sort(.)
}
}

